#include <iostream>
using namespace std;

int mod_aX(int a, int x, int p)
{
    int rez = 0;
    rez = a;
    for (int i = 2; i <= x; i++)
    {
        rez *= a;
        while (rez >= p) { rez -= p; }
    }
    if (x == 1)
    {
        while (rez >= p) { rez -= p; }
    }
    return rez;
}

// Расширенный алгоритм Евклида //
void extended_euclid(unsigned long a, unsigned long b, long* x, long* y, long* d)
{
    long q, r, x1, x2, y1, y2;
    if (b == 0)
    {
        *d = a, * x = 1, * y = 0;
        return;
    }
    x2 = 1, x1 = 0, y2 = 0, y1 = 1;
    while (b > 0)
    {
        q = a / b, r = a - q * b;
        *x = x2 - q * x1, * y = y2 - q * y1;
        a = b, b = r;
        x2 = x1, x1 = *x, y2 = y1, y1 = *y;
    }
    *d = a, * x = x2, * y = y2;
}

//Ищем обратный элемент по модулю//
long inverse(unsigned long a, unsigned long n)
{
    long d, x, y;
    extended_euclid(a, n, &x, &y, &d);
    if (d != 1) { return 0; }
    else
        return x;
}
void D_H(long p = 30803, long g = 2, long XA = 1000, long XB = 2000)
{
    int a = 1000, b = 2000;
    long A, B, K;
    A = mod_aX(g, a, p);
    cout << "OpenKey A:" << A << endl;
    B = mod_aX(g, b, p);
    cout << "OpenKey B:" << B << endl;
    K = mod_aX(A, b, p);
    cout << "SecretKey A:" << K << endl;
    K = mod_aX(B, a, p);
    cout << "SecretKey B:" << K << endl;
}
void El_Gamal(long p = 30803, long g = 2, long c = 500, long k = 600, long M = 11111)
{
    long a, b, y;
    y = mod_aX(g, c, p);
    a = mod_aX(g, k, p);
    b = mod_aX(y, k, p);
    b = mod_aX((b * M), 1, p);
    cout << "Sipher (" << a << ";" << b << ")" << endl;
}
void RSA(long p = 131, long q = 227, long d = 3, long m = 11111)
{
    long e = inverse(d, p);
    long P = mod_aX(m, e, (p * q));
    cout << P << endl;
}